{"version":3,"sources":["News.js","App.js","serviceWorker.js","index.js"],"names":["UrlField","record","source","title","target","rel","href","NewsFilter","props","Filter","TextInput","label","alwaysOn","NewsList","isSmall","useMediaQuery","theme","breakpoints","down","List","bulkActionButtons","bulkActions","filters","sort","field","order","perPage","Datagrid","hasBulkActions","TextField","DateField","CveNewsFilter","BooleanInput","CveNewsList","NumberField","dataProvider","fakeDataProvider","data","App","Admin","Resource","name","list","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qjzkBAaMA,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,MAAnB,OAA+B,uBAAGC,OAAO,SAASC,IAAI,sBAAsBC,KAAML,EAAOC,IAAUD,EAAOE,KAErHI,EAAa,SAACC,GAAD,OACf,kBAACC,EAAA,EAAWD,EACR,kBAACE,EAAA,EAAD,CAAWC,MAAM,SAAST,OAAO,IAAIU,UAAQ,MAIxCC,EAAW,SAAAL,GACpB,IAAMM,EAAUC,aAAc,SAAAC,GAAK,OAAIA,EAAMC,YAAYC,KAAK,SAC9D,OACI,kBAACC,EAAA,EAAD,iBAAUX,EAAV,CAAiBY,mBAAmB,EAAOC,aAAa,EAAOC,QAAS,kBAAC,EAAD,MAAgBC,KAAM,CAAEC,MAAO,OAAQC,MAAO,QAAUC,QAAS,KACpIZ,EACG,kBAACa,EAAA,EAAD,CAAUC,gBAAgB,GACtB,kBAAC,EAAD,CAAUjB,MAAM,OAAOT,OAAO,MAAMC,MAAM,WAG9C,kBAACwB,EAAA,EAAD,CAAUC,gBAAgB,GACtB,kBAAC,EAAD,CAAUjB,MAAM,OAAOT,OAAO,MAAMC,MAAM,UAC1C,kBAAC0B,EAAA,EAAD,CAAW3B,OAAO,WAClB,kBAAC4B,EAAA,EAAD,CAAW5B,OAAO,YAOhC6B,EAAgB,SAACvB,GAAD,OAClB,kBAACC,EAAA,EAAWD,EACR,kBAACE,EAAA,EAAD,CAAWC,MAAM,SAAST,OAAO,IAAIU,UAAQ,IAC7C,kBAACoB,EAAA,EAAD,CAAcrB,MAAM,WAAWT,OAAO,UAAUU,UAAQ,MAInDqB,EAAc,SAAAzB,GACvB,IAAMM,EAAUC,aAAc,SAAAC,GAAK,OAAIA,EAAMC,YAAYC,KAAK,SAC9D,OACI,kBAACC,EAAA,EAAD,iBAAUX,EAAV,CAAiBY,mBAAmB,EAAOC,aAAa,EAAOC,QAAS,kBAAC,EAAD,MAAmBC,KAAM,CAAEC,MAAO,OAAQC,MAAO,QAAUC,QAAS,KACvIZ,EACG,kBAACa,EAAA,EAAD,CAAUC,gBAAgB,GACtB,kBAAC,EAAD,CAAUjB,MAAM,OAAOT,OAAO,MAAMC,MAAM,WAG9C,kBAACwB,EAAA,EAAD,CAAUC,gBAAgB,GACtB,kBAACC,EAAA,EAAD,CAAW3B,OAAO,UAAUS,MAAM,yBAClC,kBAAC,EAAD,CAAUA,MAAM,cAAcT,OAAO,MAAMC,MAAM,UACjD,kBAAC+B,EAAA,EAAD,CAAahC,OAAO,OAAOS,MAAM,SACjC,kBAACkB,EAAA,EAAD,CAAW3B,OAAO,WAClB,kBAAC4B,EAAA,EAAD,CAAW5B,OAAO,Y,kBCrDhCiC,EAAeC,YAAiBC,GAWvBC,EATH,kBACV,kBAACC,EAAA,EAAD,CAAOpC,MAAM,gBAAgBgC,aAAcA,GACvC,kBAACK,EAAA,EAAD,CAAUC,KAAK,WAAWC,KAAM7B,IAChC,kBAAC2B,EAAA,EAAD,CAAUC,KAAK,cAAcC,KAAM7B,IACnC,kBAAC2B,EAAA,EAAD,CAAUC,KAAK,YAAYC,KAAM7B,IACjC,kBAAC2B,EAAA,EAAD,CAAUC,KAAK,YAAYC,KAAMT,MCHnBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.24feabc9.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Filter,\n    TextInput,\n    BooleanInput,\n    List,\n    Datagrid,\n    TextField,\n    DateField,\n    NumberField\n} from 'react-admin';\nimport { useMediaQuery } from '@material-ui/core';\n\nconst UrlField = ({ record, source, title }) => <a target=\"_blank\" rel=\"noopener noreferrer\" href={record[source]}>{record[title]}</a>;\n\nconst NewsFilter = (props) => (\n    <Filter {...props}>\n        <TextInput label=\"Search\" source=\"q\" alwaysOn />\n    </Filter>\n);\n\nexport const NewsList = props => {\n    const isSmall = useMediaQuery(theme => theme.breakpoints.down('sm'));\n    return (\n        <List {...props} bulkActionButtons={false} bulkActions={false} filters={<NewsFilter />} sort={{ field: 'Date', order: 'DESC' }} perPage={25}>\n            {isSmall ? (\n                <Datagrid hasBulkActions={false} >\n                    <UrlField label=\"Link\" source=\"URL\" title=\"Title\"/>\n                </Datagrid>\n            ) : (\n                <Datagrid hasBulkActions={false} >\n                    <UrlField label=\"Link\" source=\"URL\" title=\"Title\"/>\n                    <TextField source=\"Source\" />\n                    <DateField source=\"Date\"/>\n                </Datagrid>\n            )}\n        </List>\n    );\n};\n\nconst CveNewsFilter = (props) => (\n    <Filter {...props}>\n        <TextInput label=\"Search\" source=\"q\" alwaysOn />\n        <BooleanInput label=\"Has CVSS\" source=\"HasCVSS\" alwaysOn />\n    </Filter>\n);\n\nexport const CveNewsList = props => {\n    const isSmall = useMediaQuery(theme => theme.breakpoints.down('sm'));\n    return (\n        <List {...props} bulkActionButtons={false} bulkActions={false} filters={<CveNewsFilter />} sort={{ field: 'Date', order: 'DESC' }} perPage={25}>\n            {isSmall ? (\n                <Datagrid hasBulkActions={false} >\n                    <UrlField label=\"Link\" source=\"URL\" title=\"Title\"/>\n                </Datagrid>\n            ) : (\n                <Datagrid hasBulkActions={false} >\n                    <TextField source=\"Impacts\" label=\"Impacts (best guess)\"/>\n                    <UrlField label=\"Description\" source=\"URL\" title=\"Title\"/>\n                    <NumberField source=\"CVSS\" label=\"CVSS\"/>\n                    <TextField source=\"Source\" />\n                    <DateField source=\"Date\"/>\n                </Datagrid>\n            )}\n        </List>\n    );\n};\n\n","import React from 'react'\nimport { Admin, Resource } from 'react-admin'\nimport fakeDataProvider from 'ra-data-fakerest'\nimport { NewsList, CveNewsList } from './News'\nimport './App.css'\nimport data from './data'\n\n\nconst dataProvider = fakeDataProvider(data)\n\nconst App = () => (  \n  <Admin title=\"Security News\" dataProvider={dataProvider}>\n      <Resource name=\"All News\" list={NewsList} />\n      <Resource name=\"Breach News\" list={NewsList} />\n      <Resource name=\"Tool News\" list={NewsList} />\n      <Resource name=\"Vuln News\" list={CveNewsList} />\n  </Admin>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}